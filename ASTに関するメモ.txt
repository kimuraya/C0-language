ASTを構成するクラス一覧
左が親クラス、右が子クラス

Node
	AstNode                     //グローバル変数の確保など、プログラム全体の初期処理と後処理を行う
	ExpressionNode              //式を表す
		LiteralNode             //定数
		IdentifierNode          //識別子
		AssignNode              //"="
		EquivalenceNode         //"=="
		NotEquivalenceNode      //"!="
		LessThanNode            //"<"
		LessThanOrEqualNode     //"<="
		GreaterThanNode         //">"
		GreaterThanOrEqualNode  //">="
		LogicalAndNode          //"&&"
		LogicalOrNode           //"||"
		PlusNode                //"+"
		MinusNode               //"-"
		MulNode                 //"*"
		DivNode                 //"/"
		ModNode                 //"%"
		ExclamationNode         //"!"
		UnaryMinusNode          //"-" 単項マイナス式
		PreIncrementNode        //"++" 前置増分
		PreDecrementNode        //"--" 前置減分
		PostIncrementNode       //"++" 後置増分
		PostDecrementNode       //"--" 後置減分
		CallNode                //関数呼び出し（ネイティブ関数を含む）
	StatementNode               //文を表す
		BlockNode               //複合文
		IfNode                  //if-else文
		WhileNode               //while文
		ForNode                 //for文
		BreakNode               //break文
		ReturnNode              //return文
		ExpressionStatementNode //式文
		EmptyStatementNode      //空文
		
IdentifierNodeクラスのオブジェクトにグローバル変数の場合は値を、関数の場合は関数本体などの情報を持たせる
IdentifierNodeオブジェクトのリストがシンボルテーブル
シンボルテーブルから識別子の情報を名前（文字列）で検索出来るメソッドが必要
IdentifierNodeから値を取り出す、保存するメソッドが必要
変数と配列の値の出し入れは区別する必要がある？
内部で処理を分岐させるか

class IdentifierNode {
	String name;              //識別子
	String identifierType;    //識別子の種類。変数か関数か。
	int val;                  //グローバル変数の値。int型のままだと、他のデータ型に対応できない。検討が必要
	AST funcParams;           //引数のリスト
	AST funcBody;             //関数本体
	boolean standardFuncFlag; //組み込み関数か否かを判別する為のフラグ変数
}

演算子、代入文を親クラスにして、一まとめにできないか。
代入文をまとめて処理するメソッドを作り、その中で変数への代入、配列への代入などを区別し、処理を分ける。

代入の命令は一つだけで間に合う？
左辺値をterm()にし、term()の中に変数や配列参照を入れる。
opcodeは不必要？

class Node {
	opcode op;
}

class StatementNode {
	public execute(); //文の実行を行うメソッド。継承させる。
}

class AssignNode {
	IdentifierNode identifier;
	ExpressionStatementNode expression;
}


