インタプリタに関するメモ

1.抽象構文木（AST）について

詳しくは別のメモにまとめる。

1.1 識別子の管理について

識別子の管理はクラスIdentifierNodeで行う。
識別子の登録の際、文字列をASTにする関数が必要。
識別子から値を取り出す際、ASTのノードから識別子の名前を調べ、値を適切に入出力する関数が必要。

class IdentifierNode {
	String name;              //識別子
	String identifierType;    //識別子の種類。変数か関数か。
    int val;                  //グローバル変数の値。int型のままだと、他のデータ型に対応できない。検討が必要
    AST funcParams;           //引数のリスト
    AST funcBody;             //関数本体
	boolean standardFuncFlag; //組み込み関数か否かを判別する為のフラグ変数
}

2.インタプリタ

C0言語のインタプリタは構文木を入力として受け取り、処理を実行する。
インタプリタは構文木に変換された文を実行するために、環境とシンボルテーブルを用意する必要がある。
インタプリタ実行中に変数とローカル変数の値を別に管理する必要がある。その為、環境というデータ構造を用意する。

環境：
ローカル変数（引数を含む）と現在の値をバインドする。
環境は、環境クラスの配列等で実現する。
関数やブロック文の実行が実行される前にローカル変数を環境に確保する。
関数やブロック文の実行が終了する際、環境に確保されたローカル変数は破棄される。
環境の用途と構造はコールスタックとほぼ同じ。

http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%BC%E3%83%AB%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF

class Environment {
	IdentifierNode var; //ローカル変数の識別子
	int val;            //ローカル変数の値
}

Environment Env[1000]; //次のような環境の配列をインタプリタ内に用意する。ローカル変数にアクセスする際に使用する

シンボルテーブル：
識別子のリストをシンボルテーブルで管理する。
シンボルテーブルは、識別子を表すクラスIdentifierNodeの配列等で表現する。
識別子の種類（変数か関数名か）や識別子が持つ情報（変数の場合は値。関数名の場合は引数や関数本体のアドレスの情報）は識別子のクラスが管理する。

IdentifierNode SymbolTable[1000]; //シンボルテーブル

2.1 ユーザー定義関数の実行

main関数を探して実行（main関数のみ）。
引数と環境をバインドする。
呼び出し元への戻り先を保存する（呼び出し元の次のアドレス）。
関数本体に付属するブロック文を実行する。
ブロック文を実行した結果、発生する戻り値を取得する。
引数を環境から削除する。
戻り先に戻り値を返し、関数本体の処理を終了する。

2.2 ブロック文の実行

ブロック文のノードは、実行する文をリストの形で保持する。
ブロック文でローカル変数と環境をバインドする。
文のリストを実行。
文を実行し、ノードの種類のよって、実行する文を選択する。
文の処理が終わった後、ブロック文で使ったローカル変数を環境から削除する。

文のリストは拡張for文で回す。
breakとreturnの実行は例外のスローによって、呼び出し元に通知する。
breakとreturnによって発生する例外は、ループと関数のメソッドでcatchする。

2.3 標準関数呼び出しについて

関数にはユーザーが定義するユーザー定義関数、ホスト言語のメソッドを呼び出すネイティブ関数の2種類を用意する。
今回の場合、ネイティブ関数はJavaの標準API。
関数呼び出しの処理の内部で、ユーザー定義関数とネイティブ関数の呼び出しを区別する。

ネイティブ関数はユーザー定義関数と同じように、インタプリタを作る際に関数定義のリスト（シンボルテーブル）に登録する。
ネイティブ関数はユーザー定義関数と同じ引数（AST）で呼び出せるようにラップする。
ネイティブ関数はユーザー定義関数と同じ関数で呼び出す（ネイティブ関数はASTから取り出した値を引数として受け取り、処理を実行する）。

関数呼び出しの処理を行う際、呼び出そうとしている関数をチェックし、ネイティブ関数の場合、専用のネイティブ関数呼び出しクラスのメソッドを起動する。
ネイティブ関数呼び出しクラスを拡張するだけで、使える標準関数の数を増やせる。
ネイティブ関数呼び出しメソッドの内部で、ASTの引数を関数に渡せる形式に変換する。
この処理により、ASTの関数呼び出しのノードからネイティブの関数を呼び出せる。







