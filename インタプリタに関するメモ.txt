インタプリタに関するメモ

1.インタプリタ

C0言語のインタプリタは構文木を入力として受け取り、処理を実行する。
インタプリタ全体の処理の流れは次の通り。

ソースファイルの読み込み
パーサの実行
構文木（AstNodeから）の実行
各ノードのオブジェクトの処理を実行するメソッドが実行される
プログラム全体の後処理を行う
処理の終了

インタプリタは構文木に変換された文を実行するために、環境とシンボルテーブルを用意する必要がある。
インタプリタ実行中に変数とローカル変数の値を別に管理する必要がある。その為、環境というデータ構造を用意する。

環境：
ローカル変数（引数を含む）と現在の値をバインドする。
環境は、環境クラスの配列等で実現する。
関数やブロック文の実行が実行される前にローカル変数を環境に確保する。
関数やブロック文の実行が終了する際、環境に確保されたローカル変数は破棄される。
環境の用途と構造はコールスタックとほぼ同じ。

http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%BC%E3%83%AB%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF

class Environment {
	IdentifierNode var; //ローカル変数の識別子
	int val;            //ローカル変数の値
}

List<Environment> interpreterEnvironment; //次のような環境の配列をインタプリタ内に用意する。ローカル変数にアクセスする際に使用する

シンボルテーブル：
識別子のリストをシンボルテーブルで管理する。
シンボルテーブルは、識別子を表すクラスIdentifierNodeの配列等で表現する。
識別子の種類（変数か関数名か）や識別子が持つ情報（変数の場合は値。関数名の場合は引数や関数本体のアドレスの情報）は識別子のクラスが管理する。

List<IdentifierNode> symbolTable; //シンボルテーブル

1.1 ユーザー定義関数の実行

関数呼び出しを実行するメソッドが起動する。
引数として受け取ったASTから識別子を取り出し、識別子の名前でシンボルテーブルをサーチする。
ASTで受け取った引数のリストと環境をバインドする（環境の配列の要素を引数分の数だけ確保する）。
呼び出し元への戻り先を保存する（呼び出し元の次のアドレス）。
識別子のオブジェクトのインスタンス変数は、関数のブロック文のアドレスを持つ。
ブロック文を実行するメソッドに、ブロック文のASTの参照を渡す。
ブロック文が実行される。
ブロック文を実行した結果、発生する戻り値を取得する。
引数を環境から削除する。
呼び出し元に関数の戻り値を返し、関数本体の処理を終了する。

1.2 ブロック文の実行

ブロック文のノードは、実行する文をリストの形で保持する。
ブロック文でローカル変数と環境をバインドする。
文のリストを実行。
文を実行し、ノードの種類のよって、実行する文を選択する。
文の処理が終わった後、ブロック文で使ったローカル変数を環境から削除する。

文のリストは拡張for文で回す。
breakとreturnの実行は例外のスローによって、呼び出し元に通知する。
breakとreturnによって発生する例外は、繰り返し文と関数のメソッドがcatchする。

1.3 標準関数呼び出しについて

C0言語インタプリタの関数には、ユーザーが定義するユーザー定義関数、ホスト言語のメソッドを呼び出すネイティブ関数の2種類がある。
ネイティブ関数とは、C0言語から呼び出せるJava標準APIのラッパ関数である。
C0言語インタプリタは標準関数をネイティブ関数の形でユーザーに提供する。

ネイティブ関数はユーザー定義関数と同じように、インタプリタを作る際に識別子のリスト（シンボルテーブル）に登録する。
C0言語インタプリタは関数呼び出しの処理の内部で、ユーザー定義関数とネイティブ関数の呼び出しを区別する。
関数呼び出しの処理を行う際、呼び出そうとしている関数がネイティブ関数であるかをチェックする。
ネイティブ関数である場合、専用のネイティブ関数呼び出しクラスのメソッドを起動する。
ネイティブ関数呼び出しメソッドの内部で、引数のASTをJavaのメソッドに渡せる形式に変換する。
この処理により、ASTの関数呼び出しのノードからネイティブの関数を呼び出せる。

2.抽象構文木（AST）について

詳しくは別のメモにまとめる。

2.1 識別子の管理について

識別子の管理はクラスIdentifierNodeで行う。
識別子の登録の際、文字列をASTにする関数が必要。
識別子から値を取り出す際、ASTのノードから識別子の名前を調べ、値を適切に入出力する関数が必要。

class IdentifierNode {
	private String name;                     //識別子
	private String identifierType;           //識別子の種類。変数か関数か。
	private Variable value;                  //グローバル変数の値
	private List<IdentifierNode> parameters; //引数のリスト
	private BlockNode functionBody;          //関数本体
	private boolean standardFunctionFlag;   //組み込み関数か否かを判別する為のフラグ変数
}

2.2 その他

構文木の種類は、c0.util.NodeTypeで表す。
識別子に関連する値は、c0.ast.IdentifierNodeが持つ。
識別子の種類は、c0.util.IdentifierTypeで表す。
定数に関連する値は、c0.ast.LiteralNodeが持つ。
左辺値の値は、c0.util.LeftValueが持つ。

