//JavaCCオプション
options {
	STATIC = false; //マルチスレッド環境で使えるようにするため、falseに
	DEBUG_PARSER = false; //デバッグ情報の出力
	UNICODE_INPUT = true; //日本語を処理する
	JDK_VERSION = "1.6";
}

PARSER_BEGIN(C0Language)
package c0.parser;

import c0.ast.*;
import c0.util.*;
import java.util.List;
import java.util.LinkedList;

public class C0Language {
	
	private String fileName = null;
	
	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
	}}
PARSER_END(C0Language)

//スキャナの記述

//空白類
SPECIAL_TOKEN: {
	<WHITESPACE: ([" ", "\f", "\n", "\r", "\t"])+>
}

//ブロックコメント
//"*/"を検出したら、最初の状態に戻る
MORE: { <"/*"> : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: { <~[]> }
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: { <BLOCK_COMMENT: "*/"> : DEFAULT }

//一行コメント
//"//"、改行以外の文字（0回以上の繰り返し）、改行文字（省略可能）
SPECIAL_TOKEN: {
	<LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r\n" | "\r")?>
}

//文のキーワード
TOKEN: {
	  <INT      : "int">
	| <BOOLEAN  : "boolean">
	| <VOID     : "void">
	| <IF       : "if">
	| <ELSE     : "else">
	| <WHILE    : "while">
	| <FOR      : "for">
	| <RETURN   : "return">
	| <BREAK    : "break">
}

//真偽値リテラル
TOKEN: {
	  <TRUE : "true">
	| <FALSE : "false">
}

//識別子
TOKEN: {
	<IDENTIFIER: ["A"-"Z", "a"-"z", "_"] (["A"-"Z", "a"-"z", "_", "0"-"9"])*>
}

//整数
TOKEN: {
	<INTEGER: ["1"-"9"] (["0"-"9"])*
			| "0"
	>
}

//文字列リテラル
MORE: { <"\""> : IN_STRING }
	<IN_STRING> MORE: {
		  <(~["\"", "\\", "\n", "\r"])+> //二重引用符'"', バックスラッシュ'\', 改行文字'\n', '\r'以外の1回以上の繰り返し
		| <"\\" ~[]> //エスケープコード
}
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }


//パーサの記述

//外部宣言 :=
//   {関数宣言}+
//	|外部変数宣言
AstNode file():
{
	Token token = null;
	List<IdentifierNode> functions = new LinkedList<IdentifierNode>();
	IdentifierNode function = null;
	List<DeclareVariableNode> globalVariables = new LinkedList<DeclareVariableNode>();
	DeclareVariableNode globalVariable = null;
}
{
		//関数宣言と外部変数宣言の処理
		//構文エラーが発生した際はエラーを出力し、次の構文の処理を行う
		(
		  try {
		      LOOKAHEAD(type() primaryExpression() "(")
		      function=defineFunction() { if(function != null) functions.add(function); }
			| globalVariable=declareVariable() { if(globalVariable != null) globalVariables.add(globalVariable); }
		  } catch(ParseException e) {
			e.printStackTrace();

				//文、ファイルの終わりが見つかるまでスキップする
				//この処理にバグがないかチェックする
				do {
					token = getNextToken();
				} while(token.image.equals(";") && token.image.equals("}") && token.kind != EOF);
		  }
		)*
		<EOF>
			{
				return new AstNode(globalVariables, functions);			}
	
}

//関数宣言 :=
//	データ型 単純宣言子 '(' [引数 {',' 引数}* ] ')' 複合文
IdentifierNode defineFunction():
{
	DataTypeNode dataType = null;
	ExpressionNode function = null;
	IdentifierNode function_i = null;
	List<ParameterNode> parameters = null;
	StatementNode block = null;
	Identifier identifier = null;
}
{
	dataType=type() function=primaryExpression() "(" [parameters=parameters()] ")" block=blockStatement() //角括弧も取り除く必要がある？
		{
			function_i = (IdentifierNode)function;
			
			identifier = function_i.getIdentifier();
			identifier.setIdentifierType(IdentifierType.FUNCTION); //識別子の種類は関数
			identifier.setStandardFunctionFlag(false); //組み込み関数ではない
			identifier.setFunctionNode(function_i); //ノードのリンク
			
			function_i.setIdentifier(identifier);
			function_i.setParameters(parameters); //引数
			function_i.setBlock(block); //複合文
			function_i.setReturnDataType(dataType); //戻り値のデータ型
			
			
			return function_i;		}
}

//引数のリスト
List<ParameterNode> parameters():
{
	List<ParameterNode> parameters = new LinkedList<ParameterNode>();
	ParameterNode parameter1 = null;
	ParameterNode parameter2 = null;}
{
	parameter1=parameter() { if(parameter1 != null) parameters.add(parameter1); }
	(LOOKAHEAD(2) "," parameter2=parameter() { if(parameter2 != null) parameters.add(parameter2); } )*
	{
		return parameters;	}}

//引数 :=
//	データ型 識別子
ParameterNode parameter():
{
	Token token = null;
	DataTypeNode dataType = null;
	ExpressionNode parameterName = null;
	IdentifierNode parameterName_i = null;
	Identifier identifier = null;
}
{
	dataType=type() parameterName=primaryExpression()
		{
			parameterName_i = (IdentifierNode)parameterName;
			identifier = parameterName_i.getIdentifier();
			identifier.setIdentifierType(IdentifierType.VARIABLE); //識別子の種類は変数
			parameterName_i.setIdentifier(identifier);
			return new ParameterNode(new Location(this.getFileName(), token), dataType, parameterName_i);		}
}

//変数宣言 :=
//データ型 単純宣言子 ['=' 式] ';'
//|データ型 配列宣言子 ';'
DeclareVariableNode declareVariable():
{
	Token token = null;
	DataTypeNode dataType = null;
	ExpressionNode variable = null;
	IdentifierNode variable_i = null;
	ExpressionNode expression = null;
	Identifier identifier = null;
}
{
	dataType=type() variable=primaryExpression() ["=" expression=expression()] token=";"
		{
			variable_i = (IdentifierNode)variable;
			identifier = variable_i.getIdentifier();
			identifier.setIdentifierType(IdentifierType.VARIABLE); //識別子の種類は変数
			variable_i.setIdentifier(identifier);
			return new DeclareVariableNode(new Location(this.getFileName(), token), dataType, variable_i, expression);		}
}

//型の構文
//データ型 :=
//	'int'
DataTypeNode type():
{
	DataType dataType; //基本データ型
	ExpressionNode elementNumber = null; //要素数
}
{
	LOOKAHEAD(<INT> "[")
	<INT> "[" elementNumber=expression() "]"
	{
		return new DataTypeNode(DataType.INT_ARRAY, elementNumber); //整数の配列
	}
    | LOOKAHEAD(<INT> "[]")
	<INT> "[]"
	{
		return new DataTypeNode(DataType.INT_ARRAY, null); //整数の配列の参照変数
	} 
	| LOOKAHEAD(<BOOLEAN> "[")
	<BOOLEAN> "[" elementNumber=expression() "]"
	{
		return new DataTypeNode(DataType.BOOLEAN_ARRAY, elementNumber); //真偽値の配列
	}
	| LOOKAHEAD(<BOOLEAN> "[]")
	<BOOLEAN> "[]"
	{
		return new DataTypeNode(DataType.BOOLEAN_ARRAY, null); //真偽値の配列の参照変数
	}
	| <INT>
	{
		return new DataTypeNode(DataType.INT, elementNumber); //整数の変数
	}
	| <BOOLEAN>
	{
		return new DataTypeNode(DataType.BOOLEAN, elementNumber); //真偽値の変数	}
	| <VOID>
	{
		return new DataTypeNode(DataType.VOID, elementNumber); //void
	}
}

//文 :=
//	式文
//	|複合文
//	|条件文
//	|繰り返し文
//	|return文
//	|空文
StatementNode statement():
{
	StatementNode statementNode = null;
}
{
	( statementNode=expressionStatement()
	| statementNode=blockStatement()
	| statementNode=conditionalStatement()
	| statementNode=iterationStatement()
	| statementNode=breakStatement()
	| statementNode=returnStatement()
	| statementNode=emptyStatement()
	)
		{
			return statementNode;		}
}

//複合文 :=
//	'{' 局所変数宣言 {文}* '}'
StatementNode blockStatement():
{
	Token token = null;
	List<DeclareVariableNode> localVariables = null; //ローカル変数の宣言
	List<StatementNode> statements = null; //ブロック文本体
}
{
	token="{" localVariables=declareLocalVariables() statements=statements() "}"
	{
		return new BlockNode(new Location(this.getFileName(), token), localVariables, statements);	}
}

//ブロック文本体
List<StatementNode> statements():
{
	List<StatementNode> statements = new LinkedList<StatementNode>(); //文のリスト
	StatementNode statement = null;
}
{
	(statement=statement() { if(statement != null) statements.add(statement); })*
	{
		return statements;
	}
}

//局所変数宣言 :=
//	{変数宣言}+
List<DeclareVariableNode> declareLocalVariables():
{
	List<DeclareVariableNode> declareVariables = new LinkedList<DeclareVariableNode>(); //すべての局所変数宣言
	DeclareVariableNode declareVar = null;
}
{
	(declareVar=declareVariable() { if(declareVar != null) declareVariables.add(declareVar); })*
	{
		return declareVariables;	}
}

//条件文 :=
//	if文
//この箇所は削除するか検討する
StatementNode conditionalStatement():
{
	StatementNode conditionalStatementNode = null;
}
{
	conditionalStatementNode=ifStatement() { return conditionalStatementNode; }
}

//if文 :=
//	'if' '(' 式 ')' 文 ['else' 文]
StatementNode ifStatement():
{
	Token token = null;
	ExpressionNode conditional = null;
	StatementNode thenBody = null;
	StatementNode elseBody = null;
}
{
	token=<IF> "(" conditional=expression() ")" thenBody=statement() [LOOKAHEAD(1) <ELSE> elseBody=statement()]
	{ return new IfNode(new Location(this.getFileName(), token), conditional, thenBody, elseBody); }
}

//繰り返し文 :=
//	while文
//	|for文
StatementNode iterationStatement():
{
	StatementNode iterationStatement = null;
}
{
	  iterationStatement=whileStatement() { return iterationStatement; }
	| iterationStatement=forStatement() { return iterationStatement; }
}

//while文 :=
//	'while' '(' 式 ')' 文
StatementNode whileStatement():
{
	Token token = null;
	ExpressionNode conditional = null;
	StatementNode body = null;
}
{
	token=<WHILE> "(" conditional=expression() ")" body=statement()
	{
		body.setLoopFlag(true);
		return new WhileNode(new Location(this.getFileName(), token), conditional, body);
	}
}

//for文 :=
//	'for' '(' [式] ';' [式] ';' [式] ')' 文
//初期化部や更新部で複数の式文を実行出来るようするべきか
StatementNode forStatement():
{
	Token token = null;
	ExpressionNode initialize = null;
	ExpressionNode conditional = null;
	ExpressionNode update = null;
	StatementNode body = null;
}
{
	token=<FOR> "(" [initialize=expression()] ";" [conditional=expression()] ";" [update=expression()] ")" body=statement()
	{
		body.setLoopFlag(true);
		return new ForNode(new Location(this.getFileName(), token), initialize, conditional, update, body);	}
}

//break文 :=
//	'break' ';'
StatementNode breakStatement():
{
	Token token = null;
}
{
	token=<BREAK> ";" { return new BreakNode(new Location(this.getFileName(), token)); }
}

//return文 :=
//	'return' [式] ';'
StatementNode returnStatement():
{
	Token token = null;
	ExpressionNode expressionNode = null;
}
{
	token=<RETURN> [expressionNode=expression()] ";" { return new ReturnNode(new Location(this.getFileName(), token), expressionNode); }
}

//空文 :=
//	';'
//あとで見直す
StatementNode emptyStatement():
{
	Token token = null;
}
{
	token=";" { return new EmptyStatementNode(new Location(this.getFileName(), token)); }
}

//式文 :=
//	式 ';'
ExpressionStatementNode expressionStatement():
{
	Token token = null;
	ExpressionNode expressionNode = null;
}
{
	//要修正。式のコンストラクタとメソッドを追加してから書き換える
	expressionNode=expression() token=";" { return new ExpressionStatementNode(new Location(this.getFileName(), token), expressionNode); }
}

//式の構文
//演算子の優先順位が低い順に書く

//代入式
ExpressionNode expression():
{
	ExpressionNode left = null;
	ExpressionNode right = null;
	ExpressionNode expressionNode = null;
}
{
	  LOOKAHEAD(term() "=") left=term() "=" right=expression()
		{
			return new AssignNode(left, right);
		}
	| expressionNode=expression5()
		{
			return expressionNode;
		}
}

//論理OR
ExpressionNode expression5():
{
	ExpressionNode left = null;
	ExpressionNode right = null;
}
{
	left=expression4() ("||" right=expression4() { left = new LogicalOrNode(left, right); })*
							{
								return left;
							}
}

//論理AND
ExpressionNode expression4():
{
	ExpressionNode left = null;
	ExpressionNode right = null;
}
{
	left=expression3() ("&&" right=expression3() { left = new LogicalAndNode(left, right); })*
						   {
						   		return left;
						   }
}

//同等式
//関係式
ExpressionNode expression3():
{
	ExpressionNode left = null;
	ExpressionNode right = null;
}
{
	left=expression2() ( "==" right=expression2() { left = new EquivalenceNode(left, right); }
					   | "!=" right=expression2() { left = new NotEquivalenceNode(left, right); }
					   | "<"  right=expression2() { left = new LessThanNode(left, right); }
					   | ">"  right=expression2() { left = new GreaterThanNode(left, right); }
					   | "<=" right=expression2() { left = new LessThanOrEqualNode(left, right); }
					   | ">=" right=expression2() { left = new GreaterThanOrEqualNode(left, right); }
					   )*
							{
								return left;
							}
}

//加算式
//減算式
ExpressionNode expression2():
{
	ExpressionNode left = null;
	ExpressionNode right = null;
}
{	
	left=expression1()  ( "+" right=expression1() { left = new PlusNode(left, right); }
						| "-" right=expression1() { left = new MinusNode(left, right); }
						)*
							{
								return left;
			   				}
}

//乗算式
//除算式
//剰余式
ExpressionNode expression1():
{
	ExpressionNode left = null;
	ExpressionNode right = null;
}
{
	left=term() ( "*" right=term() { left = new MulNode(left, right); }
		   		| "/" right=term() { left = new DivNode(left, right); }
		   		| "%" right=term() { left = new ModNode(left, right); }
		   		)*
		   			{						return left;
		   			}
}

//項の構文
ExpressionNode term():
{
	ExpressionNode expressionNode = null;
}
{
	expressionNode=unaryExpression() { return expressionNode; }
}

//単項式
ExpressionNode unaryExpression():
{
	Token token = null;
	ExpressionNode expressionNode = null;
}
{
	  token="++" expressionNode=unaryExpression() { return new PreIncrementNode(expressionNode); } //前置増分式
	| token="--" expressionNode=unaryExpression() { return new PreDecrementNode(expressionNode); } //前置減分式
	| token="-" expressionNode=unaryExpression() { return new UnaryMinusNode(expressionNode); } //単項マイナス式
	| token="!" expressionNode=unaryExpression() { return new ExclamationNode(expressionNode); } //論理否定
	| expressionNode=PostfixExpression() { return expressionNode; } //後置式
}

//後置式
ExpressionNode PostfixExpression():
{
	Token token = null;
	ExpressionNode expressionNode = null;
	IdentifierNode arrayName = null;
	ExpressionNode index = null;
	List<ExpressionNode> arguments = null;
}
{
	expressionNode=primaryExpression()
	( token="++" { expressionNode = new PostIncrementNode(expressionNode); } //後置増分式
	| token="--" { expressionNode = new PostDecrementNode(expressionNode); } //後置減分式
	| token="[" index=expression() "]"
		{
			arrayName = (IdentifierNode)expressionNode;
			expressionNode = new ArraySubscriptExpressionNode(arrayName, index); //添字式
		}
	| token="(" [arguments=arguments()] ")" { expressionNode = new CallNode(expressionNode, arguments); } //関数呼び出し
	)*
		{
			return expressionNode;		}
}

//引数
List<ExpressionNode> arguments():
{
	List<ExpressionNode> arguments = new LinkedList<ExpressionNode>();
	ExpressionNode argument = null;}
{
	argument=expression() { arguments.add(argument); }
	("," argument=expression() { arguments.add(argument); })*
		{
			return arguments;		}}

//一次式
ExpressionNode primaryExpression():
{
	Token token = null;
	ExpressionNode expressionNode = null;
	IdentifierNode identifierNode = null;
	Identifier identifier = null;
	String str = null;
}
{
	token=<INTEGER> //10進定数
			{
				return new LiteralNode(new Location(this.getFileName(), token), DataType.INT, token.image);
			}
	| token=<STRING> //文字列定数
			{
				str = token.image.substring(1, token.image.length() - 1);
				return new LiteralNode(new Location(this.getFileName(), token), DataType.STRING, str);
			}
	| token=<TRUE> //真偽値定数 : true
			{
				return new LiteralNode(new Location(this.getFileName(), token), DataType.BOOLEAN, token.image);			}
	| token=<FALSE> //真偽値定数 : false
			{
				return new LiteralNode(new Location(this.getFileName(), token), DataType.BOOLEAN, token.image);
			}
	| token=<IDENTIFIER> //識別子
			{
				identifierNode = new IdentifierNode(new Location(this.getFileName(), token));
				identifier = new Identifier(token.image);
				identifierNode.setIdentifier(identifier);
				
				return identifierNode;
			}
	| "(" expressionNode=expression() ")" //括弧式
			{
				return expressionNode;			}
}