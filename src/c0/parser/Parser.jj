//JavaCCオプション
options {
	STATIC = false; //マルチスレッド環境で使えるようにするため、falseに
	DEBUG_PARSER = true; //デバッグ情報の出力
	UNICODE_INPUT = true; //日本語を処理する
	JDK_VERSION = "1.6";
}

//パーサクラス
PARSER_BEGIN(Parser)
PARSER_END(Parser)

//スキャナの記述

//文のキーワード
TOKEN: {
	  <INT      : "int">
	| <IF       : "if">
	| <ELSE     : "else">
	| <WHILE    : "while">
	| <FOR      : "for">
	| <RETURN   : "return">
	| <BREAK    : "break">
}

//識別子
TOKEN: {
	<IDENTIFIER: ["A"-"Z", "a"-"z", "_"] (["A"-"Z", "a"-"z", "_", "0"-"9"])*>
}

//整数
TOKEN: {
	<INTEGER: ["1"-"9"] (["0"-"9"])*
			| "0"
	>
}

//空白類
SPECIAL_TOKEN: {
	<WHITESPACE: ([" ", "\f", "\n", "\r", "\t"])+>
}

//一行コメント
//"//"、改行以外の文字（0回以上の繰り返し）、改行文字（省略可能）
SPECIAL_TOKEN: {
	<LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r\n" | "\r")?>
}

//文字列リテラル
MORE: { <"\""> : IN_STRING }
	<IN_STRING> MORE: {
		  <(~["\"", "\\", "\n", "\r"])+> //二重引用符'"', バックスラッシュ'\', 改行文字'\n', '\r'以外の1回以上の繰り返し
		| <"\\" ~[]> //エスケープコード
}
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }


//パーサの記述

//翻訳単位の処理
//翻訳単位 := {外部宣言}*
file(): {}
{
	(externalDefinition())* <EOF>
}

//外部宣言 :=
//	関数宣言
//	|外部変数宣言
externalDefinition(): {}
{
	  defineFunction()
	| declareGlobalVariable()
}

//関数宣言 :=
//	データ型 単純宣言子 '(' [引数 {',' 引数}* ] ')' 複合文
//宣言子については、仕様を再検討する
defineFunction(): {}
{
	type() <IDENTIFIER> "(" [parameter() ("," parameter())* ] ")" blockStatement()
}

//引数 :=
//	データ型 識別子
parameter(): {}
{
	type() <IDENTIFIER>
}


//外部変数宣言 :=
//{変数宣言}+
declareGlobalVariable(): {}
{
	(declareVariable())+
}

//変数宣言 :=
//データ型 単純宣言子 ['=' 式] ';'
//|データ型 配列宣言子 ';'
declareVariable(): {}
{
	type() <IDENTIFIER> ["=" expression()] ";"
	type() declareArray() ';'
}

//配列宣言子 :=
//	単純宣言子 '[' 式 ']'
declareArray(): {}
{
	<IDENTIFIER> "[" expression() "]"
}

//型の構文
//データ型 :=
//	'int'
type(): {}
{
	<INT>
}

//文 :=
//	式文
//	|複合文
//	|条件文
//	|繰り返し文
//	|return文
//	|空文
statement(): {}
{
	  expressionStatement()
	| blockStatement()
	| conditionalStatement()
	| iterationStatement()
	| returnStatement()
	| emptyStatement()
}

//複合文 :=
//	'{' [局所変数宣言 {局所変数宣言}* ] {文}* '}'
blockStatement(): {}
{
	"{" [declareLocalVariable() (declareLocalVariable())* ] (statement())* "}"
}

//局所変数宣言 :=
//	{変数宣言}+
declareLocalVariable(): {}
{
	(declareVariable())+
}

//条件文 :=
//	if文
conditionalStatement(): {}
{
	ifStatement()
}

//if文 :=
//	'if' '(' 式 ')' 文 ['else' 文]
ifStatement(): {}
{
	<IF> "(" expression() ")" statement() [<ELSE> statement()]
}

//繰り返し文 :=
//	while文
//	|for文
iterationStatement(): {}
{
	  whileStatement()
	| forStatement()
}

//while文 :=
//	'while' '(' 式 ')' 文
whileStatement(): {}
{
	<WHILE> "(" expression() ")" statement()
}

//for文 :=
//	'for' '(' [式] ';' [式] ';' [式] ')' 文
forStatement(): {}
{
	<FOR> "(" [expression()] ";" [expression()] ";" [expression()] ")" statement()
}

//return文 :=
//	'return' [式] ';'
returnStatement(): {}
{
	<RETURN> [expression()] ";"
}

//空文 :=
//	';'
emptyStatement(): {}
{
	";"
}

//式文 :=
//	式 ';'
expressionStatement(): {}
{
	expression() ";"
}

//式の構文
//演算子の優先順位が低い順に書く

//代入式
expression(): {}
{
	  term() "=" expression()
	| expression5()
}

//論理OR
expression5(): {}
{
	expression4() ("||" expression4())*
}

//論理AND
expression4(): {}
{
	expression3() ("&&" expression3())*
}

//同等式
//関係式
expression3(): {}
{
	expression2() ( "==" expression2()
				  | "!=" expression2()
				  | "<"  expression2()
				  | ">"  expression2()
				  | "<=" expression2()
				  | ">=" expression2() )*
}

//加算式
//減算式
expression2(): {}
{
	expression1() ( "+" expression1()
				  | "-" expression1() )*
}

//乗算式
//除算式
expression1():
{
	ExpressionNode right;
	ExpressionNode left;
}
{
	term() ( "*" term() { = new MulNode(location(token), right, left) }
		   | "/" term() { = new DivNode(location(token), right, left) }
		   )*
}

//項の構文
term():
{
	ExpressionNode expressionNode;
}
{
	expressionNode=unaryExpression() { return expressionNode; }
}

//単項式
ExpressionNode unaryExpression():
{
	Token token;
	ExpressionNode expressionNode;
}
{
	  "++" expressionNode=unaryExpression() { return new PreIncrementNode(location(token), expressionNode); } //前置増分式
	| "--" expressionNode=unaryExpression() { return new PreDecrementNode(location(token), expressionNode); } //前置減分式
	| "-" expressionNode=unaryExpression() { return new UnaryMinusNode(location(token), expressionNode); } //単項マイナス式
	| "!" expressionNode=unaryExpression() { return new ExclamationNode(location(token), expressionNode); } //論理否定
	| expressionNode=PostfixExpression() { return expressionNode; } //後置式
}

//後置式
ExpressionNode PostfixExpression():
{
	Token token;
	ExpressionNode expressionNode;
	ExpressionNode index;
	List<ExpressionNode> parameters;
}
{
	expressionNode=primaryExpression()
	( "++" { expressionNode = new PostIncrementNode(location(token), expressionNode); } //後置増分式
	| "--" { expressionNode = new PostDecrementNode(location(token), expressionNode); } //後置減分式
	| "[" index=expression() "]" { expressionNode = new ArraySubscriptExpressionNode(location(token), expressionNode, index) } //添字式
	| "(" parameters=parameters() ")" { expressionNode = new CallNode(location(token), expressionNode, parameters) } //関数呼び出し
	)*
		{
			return expressionNode;		}
}

//引数
List<ExpressionNode> parameters():
{
	List<ExpressionNode> parameters = new LinkedList<ExpressionNode>();
	ExpressionNode parameter;}
{
	[parameter=expression() { parameters.add(parameter); }
	("," parameter=expression() { parameters.add(parameter); })* ]
		{
			return parameters;		}}

//一次式
ExpressionNode primaryExpression():
{
	Token token;
	ExpressionNode expressionNode;
}
{
	token=<INTEGER> //10進定数
			{
				new LiteralNode(location(token), DataType.INT, token.image);
			}
	| token=<STRING> //文字列定数
			{
				new LiteralNode(location(token), DataType.STRING, token.image);
			}
	| token=<IDENTIFIER> //識別子
			{
				new IdentifierNode(location(token), token.image);
			}
	| "(" expressionNode=expression() ")" //括弧式			{
				return expressionNode;			}
}

